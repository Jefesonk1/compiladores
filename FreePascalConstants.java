/* Generated By:JavaCC: Do not edit this line. FreePascalConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FreePascalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STAR_COMMENT = 6;
  /** RegularExpression Id. */
  int CURLY_BRACKETS_COMMENT = 7;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int RESERVED_ABSOLUTE = 9;
  /** RegularExpression Id. */
  int RESERVED_AND = 10;
  /** RegularExpression Id. */
  int RESERVED_ARRAY = 11;
  /** RegularExpression Id. */
  int RESERVED_ASM = 12;
  /** RegularExpression Id. */
  int RESERVED_BEGIN = 13;
  /** RegularExpression Id. */
  int RESERVED_CASE = 14;
  /** RegularExpression Id. */
  int RESERVED_CONST = 15;
  /** RegularExpression Id. */
  int RESERVED_CONSTRUCTOR = 16;
  /** RegularExpression Id. */
  int RESERVED_DESTRUCTOR = 17;
  /** RegularExpression Id. */
  int RESERVED_DIV = 18;
  /** RegularExpression Id. */
  int RESERVED_DO = 19;
  /** RegularExpression Id. */
  int RESERVED_DOWNTO = 20;
  /** RegularExpression Id. */
  int RESERVED_ELSE = 21;
  /** RegularExpression Id. */
  int RESERVED_END = 22;
  /** RegularExpression Id. */
  int RESERVED_FILE = 23;
  /** RegularExpression Id. */
  int RESERVED_FOR = 24;
  /** RegularExpression Id. */
  int RESERVED_FUNCTION = 25;
  /** RegularExpression Id. */
  int RESERVED_GOTO = 26;
  /** RegularExpression Id. */
  int RESERVED_IF = 27;
  /** RegularExpression Id. */
  int RESERVED_IMPLEMENTATION = 28;
  /** RegularExpression Id. */
  int RESERVED_IN = 29;
  /** RegularExpression Id. */
  int RESERVED_INHERITED = 30;
  /** RegularExpression Id. */
  int RESERVED_INLINE = 31;
  /** RegularExpression Id. */
  int RESERVED_INTERFACE = 32;
  /** RegularExpression Id. */
  int RESERVED_LABEL = 33;
  /** RegularExpression Id. */
  int RESERVED_MOD = 34;
  /** RegularExpression Id. */
  int RESERVED_NIL = 35;
  /** RegularExpression Id. */
  int RESERVED_NOT = 36;
  /** RegularExpression Id. */
  int RESERVED_OBJECT = 37;
  /** RegularExpression Id. */
  int RESERVED_OF = 38;
  /** RegularExpression Id. */
  int RESERVED_OPERATOR = 39;
  /** RegularExpression Id. */
  int RESERVED_OR = 40;
  /** RegularExpression Id. */
  int RESERVED_PACKED = 41;
  /** RegularExpression Id. */
  int RESERVED_PROCEDURE = 42;
  /** RegularExpression Id. */
  int RESERVED_PROGRAM = 43;
  /** RegularExpression Id. */
  int RESERVED_RECORD = 44;
  /** RegularExpression Id. */
  int RESERVED_REINTRODUCE = 45;
  /** RegularExpression Id. */
  int RESERVED_REPEAT = 46;
  /** RegularExpression Id. */
  int RESERVED_SELF = 47;
  /** RegularExpression Id. */
  int RESERVED_SET = 48;
  /** RegularExpression Id. */
  int RESERVED_SHL = 49;
  /** RegularExpression Id. */
  int RESERVED_SHR = 50;
  /** RegularExpression Id. */
  int RESERVED_STRING = 51;
  /** RegularExpression Id. */
  int RESERVED_THEN = 52;
  /** RegularExpression Id. */
  int RESERVED_TO = 53;
  /** RegularExpression Id. */
  int RESERVED_TYPE = 54;
  /** RegularExpression Id. */
  int RESERVED_UNIT = 55;
  /** RegularExpression Id. */
  int RESERVED_UNTIL = 56;
  /** RegularExpression Id. */
  int RESERVED_USES = 57;
  /** RegularExpression Id. */
  int RESERVED_VAR = 58;
  /** RegularExpression Id. */
  int RESERVED_WHILE = 59;
  /** RegularExpression Id. */
  int RESERVED_WITH = 60;
  /** RegularExpression Id. */
  int RESERVED_XOR = 61;
  /** RegularExpression Id. */
  int RESERVED_AS = 62;
  /** RegularExpression Id. */
  int RESERVED_CLASS = 63;
  /** RegularExpression Id. */
  int RESERVED_DISPINTERFACE = 64;
  /** RegularExpression Id. */
  int RESERVED_EXCEPT = 65;
  /** RegularExpression Id. */
  int RESERVED_EXPORTS = 66;
  /** RegularExpression Id. */
  int RESERVED_FINALIZATION = 67;
  /** RegularExpression Id. */
  int RESERVED_FINALLY = 68;
  /** RegularExpression Id. */
  int RESERVED_INITIALIZATION = 69;
  /** RegularExpression Id. */
  int RESERVED_IS = 70;
  /** RegularExpression Id. */
  int RESERVED_LIBRARY = 71;
  /** RegularExpression Id. */
  int RESERVED_ON = 72;
  /** RegularExpression Id. */
  int RESERVED_OUT = 73;
  /** RegularExpression Id. */
  int RESERVED_PROPERTY = 74;
  /** RegularExpression Id. */
  int RESERVED_RAISE = 75;
  /** RegularExpression Id. */
  int RESERVED_RESOURCESTRING = 76;
  /** RegularExpression Id. */
  int RESERVED_THREADVAR = 77;
  /** RegularExpression Id. */
  int RESERVED_TRY = 78;
  /** RegularExpression Id. */
  int RESERVED_ABSTRACT = 79;
  /** RegularExpression Id. */
  int RESERVED_ALIAS = 80;
  /** RegularExpression Id. */
  int RESERVED_ASSEMBLER = 81;
  /** RegularExpression Id. */
  int RESERVED_BITPACKED = 82;
  /** RegularExpression Id. */
  int RESERVED_BREAK = 83;
  /** RegularExpression Id. */
  int RESERVED_CDECL = 84;
  /** RegularExpression Id. */
  int RESERVED_CONTINUE = 85;
  /** RegularExpression Id. */
  int RESERVED_CPPDECL = 86;
  /** RegularExpression Id. */
  int RESERVED_CVAR = 87;
  /** RegularExpression Id. */
  int RESERVED_DEFAULT = 88;
  /** RegularExpression Id. */
  int RESERVED_DEPRECATED = 89;
  /** RegularExpression Id. */
  int RESERVED_DYNAMIC = 90;
  /** RegularExpression Id. */
  int RESERVED_ENUMERATOR = 91;
  /** RegularExpression Id. */
  int RESERVED_EXPERIMENTAL = 92;
  /** RegularExpression Id. */
  int RESERVED_EXPORT = 93;
  /** RegularExpression Id. */
  int RESERVED_EXTERNAL = 94;
  /** RegularExpression Id. */
  int RESERVED_FAR = 95;
  /** RegularExpression Id. */
  int RESERVED_FAR16 = 96;
  /** RegularExpression Id. */
  int RESERVED_FORWARD = 97;
  /** RegularExpression Id. */
  int RESERVED_GENERIC = 98;
  /** RegularExpression Id. */
  int RESERVED_HELPER = 99;
  /** RegularExpression Id. */
  int RESERVED_IMPLEMENTS = 100;
  /** RegularExpression Id. */
  int RESERVED_INDEX = 101;
  /** RegularExpression Id. */
  int RESERVED_INTERRUPT = 102;
  /** RegularExpression Id. */
  int RESERVED_IOCHECK = 103;
  /** RegularExpression Id. */
  int RESERVED_LOCAL = 104;
  /** RegularExpression Id. */
  int RESERVED_MESSAGE = 105;
  /** RegularExpression Id. */
  int RESERVED_NAME = 106;
  /** RegularExpression Id. */
  int RESERVED_NEAR = 107;
  /** RegularExpression Id. */
  int RESERVED_NODEFAULT = 108;
  /** RegularExpression Id. */
  int RESERVED_NORETURN = 109;
  /** RegularExpression Id. */
  int RESERVED_NOSTACKFRAME = 110;
  /** RegularExpression Id. */
  int RESERVED_OLDFPCCALL = 111;
  /** RegularExpression Id. */
  int RESERVED_OTHERWISE = 112;
  /** RegularExpression Id. */
  int RESERVED_OVERLOAD = 113;
  /** RegularExpression Id. */
  int RESERVED_OVERRIDE = 114;
  /** RegularExpression Id. */
  int RESERVED_PASCAL = 115;
  /** RegularExpression Id. */
  int RESERVED_PLATFORM = 116;
  /** RegularExpression Id. */
  int RESERVED_PRIVATE = 117;
  /** RegularExpression Id. */
  int RESERVED_PROTECTED = 118;
  /** RegularExpression Id. */
  int RESERVED_PUBLIC = 119;
  /** RegularExpression Id. */
  int RESERVED_PUBLISHED = 120;
  /** RegularExpression Id. */
  int RESERVED_READ = 121;
  /** RegularExpression Id. */
  int RESERVED_REGISTER = 122;
  /** RegularExpression Id. */
  int RESERVED_RESULT = 123;
  /** RegularExpression Id. */
  int RESERVED_SAFECALL = 124;
  /** RegularExpression Id. */
  int RESERVED_SAVEREGISTERS = 125;
  /** RegularExpression Id. */
  int RESERVED_SOFTFLOAT = 126;
  /** RegularExpression Id. */
  int RESERVED_SPECIALIZE = 127;
  /** RegularExpression Id. */
  int RESERVED_STATIC = 128;
  /** RegularExpression Id. */
  int RESERVED_STDCALL = 129;
  /** RegularExpression Id. */
  int RESERVED_STORED = 130;
  /** RegularExpression Id. */
  int RESERVED_STRICT = 131;
  /** RegularExpression Id. */
  int RESERVED_UNALIGNED = 132;
  /** RegularExpression Id. */
  int RESERVED_UNIMPLEMENTED = 133;
  /** RegularExpression Id. */
  int RESERVED_VARARGS = 134;
  /** RegularExpression Id. */
  int RESERVED_VIRTUAL = 135;
  /** RegularExpression Id. */
  int RESERVED_WINAPI = 136;
  /** RegularExpression Id. */
  int RESERVED_WRITE = 137;
  /** RegularExpression Id. */
  int AMPERSAND = 138;
  /** RegularExpression Id. */
  int DIGIT = 139;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 140;
  /** RegularExpression Id. */
  int HEX_DIGIT = 141;
  /** RegularExpression Id. */
  int OCTAL_DIGIT = 142;
  /** RegularExpression Id. */
  int BINARY_DIGIT = 143;
  /** RegularExpression Id. */
  int SIGN = 144;
  /** RegularExpression Id. */
  int SCALE_FACTOR = 145;
  /** RegularExpression Id. */
  int REAL = 146;
  /** RegularExpression Id. */
  int HEX_DIGIT_SEQUENCE = 147;
  /** RegularExpression Id. */
  int OCTAL_DIGIT_SEQUENCE = 148;
  /** RegularExpression Id. */
  int BINARY_DIGIT_SEQUENCE = 149;
  /** RegularExpression Id. */
  int DIGIT_SEQUENCE = 150;
  /** RegularExpression Id. */
  int DECIMAL_SEQUENCE = 151;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER = 152;
  /** RegularExpression Id. */
  int NOT_EQUALS = 153;
  /** RegularExpression Id. */
  int DOUBLE_LEFT_ARROW = 154;
  /** RegularExpression Id. */
  int DOUBLE_RIGHT_ARROW = 155;
  /** RegularExpression Id. */
  int LEFT_RIGHT_ARROW = 156;
  /** RegularExpression Id. */
  int RIGHT_LEFT_ARROW = 157;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUALS = 158;
  /** RegularExpression Id. */
  int GREATHER_THAN_OR_EQUALS = 159;
  /** RegularExpression Id. */
  int ASSIGMENT = 160;
  /** RegularExpression Id. */
  int PLUS_EQUALS = 161;
  /** RegularExpression Id. */
  int MINUS_EQUALS = 162;
  /** RegularExpression Id. */
  int TIMES_EQUALS = 163;
  /** RegularExpression Id. */
  int SLASH_EQUALS = 164;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS_DOT = 165;
  /** RegularExpression Id. */
  int DOT_CLOSE_PARENTHESIS = 166;
  /** RegularExpression Id. */
  int SEMI = 167;
  /** RegularExpression Id. */
  int PLUS = 168;
  /** RegularExpression Id. */
  int MINUS = 169;
  /** RegularExpression Id. */
  int ASTERISK = 170;
  /** RegularExpression Id. */
  int SLASH = 171;
  /** RegularExpression Id. */
  int EQUALS = 172;
  /** RegularExpression Id. */
  int LESS_THAN = 173;
  /** RegularExpression Id. */
  int GREATER_THAN = 174;
  /** RegularExpression Id. */
  int OPEN_BRACKETS = 175;
  /** RegularExpression Id. */
  int CLOSE_BRACKETS = 176;
  /** RegularExpression Id. */
  int DOT = 177;
  /** RegularExpression Id. */
  int COMMA = 178;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 179;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 180;
  /** RegularExpression Id. */
  int COLON = 181;
  /** RegularExpression Id. */
  int CARET = 182;
  /** RegularExpression Id. */
  int AT = 183;
  /** RegularExpression Id. */
  int STRING_CHARACTER = 184;
  /** RegularExpression Id. */
  int CONTROL_STRING = 185;
  /** RegularExpression Id. */
  int QUOTETED_STRING = 186;
  /** RegularExpression Id. */
  int CHARACTER_STRING = 187;
  /** RegularExpression Id. */
  int LETTER = 188;
  /** RegularExpression Id. */
  int LOWER = 189;
  /** RegularExpression Id. */
  int UPPER = 190;
  /** RegularExpression Id. */
  int IDENTIFIER = 191;
  /** RegularExpression Id. */
  int LABEL = 192;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<STAR_COMMENT>",
    "<CURLY_BRACKETS_COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "\"absolute\"",
    "\"and\"",
    "\"array\"",
    "\"asm\"",
    "\"begin\"",
    "\"case\"",
    "\"const\"",
    "\"constructor\"",
    "\"destructor\"",
    "\"div\"",
    "\"do\"",
    "\"downto\"",
    "\"else\"",
    "\"end\"",
    "\"file\"",
    "\"for\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"implementation\"",
    "\"in\"",
    "\"inherited\"",
    "\"inline\"",
    "\"interface\"",
    "\"label\"",
    "\"mod\"",
    "\"nil\"",
    "\"not\"",
    "\"object\"",
    "\"of\"",
    "\"operator\"",
    "\"or\"",
    "\"packed\"",
    "\"procedure\"",
    "\"program\"",
    "\"record  \"",
    "\"reintroduce\"",
    "\"repeat\"",
    "\"self\"",
    "\"set\"",
    "\"shl\"",
    "\"shr\"",
    "\"string\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"unit\"",
    "\"until\"",
    "\"uses\"",
    "\"var\"",
    "\"while\"",
    "\"with\"",
    "\"xor\"",
    "\"as\"",
    "\"class\"",
    "\"dispinterface\"",
    "\"except\"",
    "\"exports\"",
    "\"finalization\"",
    "\"finally\"",
    "\"initialization\"",
    "\"is\"",
    "\"library\"",
    "\"on\"",
    "\"out\"",
    "\"property\"",
    "\"raise\"",
    "\"resourcestring\"",
    "\"threadvar\"",
    "\"try\"",
    "\"abstract\"",
    "\"alias\"",
    "\"assembler\"",
    "\"bitpacked\"",
    "\"break\"",
    "\"cdecl\"",
    "\"continue\"",
    "\"cppdecl\"",
    "\"cvar\"",
    "\"default\"",
    "\"deprecated\"",
    "\"dynamic\"",
    "\"enumerator\"",
    "\"experimental\"",
    "\"export\"",
    "\"external\"",
    "\"far\"",
    "\"far16\"",
    "\"forward\"",
    "\"generic\"",
    "\"helper\"",
    "\"implements\"",
    "\"index\"",
    "\"interrupt\"",
    "\"iocheck\"",
    "\"local\"",
    "\"message\"",
    "\"name\"",
    "\"near\"",
    "\"nodefault\"",
    "\"noreturn\"",
    "\"nostackframe\"",
    "\"oldfpccall\"",
    "\"otherwise\"",
    "\"overload\"",
    "\"override\"",
    "\"pascal\"",
    "\"platform\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"published\"",
    "\"read\"",
    "\"register\"",
    "\"result\"",
    "\"safecall\"",
    "\"saveregisters\"",
    "\"softfloat\"",
    "\"specialize\"",
    "\"static\"",
    "\"stdcall\"",
    "\"stored\"",
    "\"strict\"",
    "\"unaligned\"",
    "\"unimplemented\"",
    "\"varargs\"",
    "\"virtual\"",
    "\"winapi\"",
    "\"write\"",
    "\"&\"",
    "<DIGIT>",
    "<NON_ZERO_DIGIT>",
    "<HEX_DIGIT>",
    "<OCTAL_DIGIT>",
    "<BINARY_DIGIT>",
    "<SIGN>",
    "<SCALE_FACTOR>",
    "<REAL>",
    "<HEX_DIGIT_SEQUENCE>",
    "<OCTAL_DIGIT_SEQUENCE>",
    "<BINARY_DIGIT_SEQUENCE>",
    "<DIGIT_SEQUENCE>",
    "<DECIMAL_SEQUENCE>",
    "<UNSIGNED_INTEGER>",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<>\"",
    "\"><\"",
    "\"<=\"",
    "\">=\"",
    "\":=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"(.\"",
    "\".)\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"^\"",
    "\"@\"",
    "<STRING_CHARACTER>",
    "<CONTROL_STRING>",
    "<QUOTETED_STRING>",
    "<CHARACTER_STRING>",
    "<LETTER>",
    "<LOWER>",
    "<UPPER>",
    "<IDENTIFIER>",
    "<LABEL>",
    "\"bool\"",
    "\"integer\"",
  };

}
