
options{
    IGNORE_CASE = true;
}



PARSER_BEGIN(FreePascal)
import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Map;

public class FreePascal {
  public static void main(String args[]) throws ParseException, IOException, IllegalAccessException {
    FreePascal lex = new FreePascal(new FileInputStream(args[0]));
    Map<Integer, String> CONSTANTES = new HashMap<Integer, String>();
    Class<?> clazz = FreePascalConstants.class;
    Field[] fields = clazz.getFields();

    for (Field field : fields) {
      if (field.getType() == int.class) {
      int modifiers = field.getModifiers();
      if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {
          try {
              CONSTANTES.put(field.getInt(null), field.getName());
          } catch (Exception e) {
              e.printStackTrace();
          }
      }
    }
  }
    for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
      System.out.println(CONSTANTES.get(t.kind)+ " "+t.image);
    }
  }
}

PARSER_END(FreePascal)

SKIP: {
  " "
| "\t"
| "\n"
| "\r"
| "\r\n"
| <STARCOMMENT: "(*" (~["*"])* "*)">
| <CURLYBRACKETSCOMMENT: "{" (~["}"])* "}">
| <SINGLELINECOMMENT: "//" (~["\n", "\r"])*>

}

//Turbo Pascal reserved words
TOKEN: {
  <ABSOLUTE: "absolute">
| <AND: "and">
| <ARRAY: "array">
| <ASM: "asm">
| <BEGIN: "begin">
| <CASE: "case">
| <CONST: "const">
| <CONSTRUCTOR: "constructor">
| <DESTRUCTOR: "destructor">
| <DIV: "div">
| <DO: "do">
| <DOWNTO: "downto">
| <ELSE: "else">
| <END: "end">
| <FILE: "file">
| <FOR: "for">
| <FUNCTION: "function">
| <GOTO: "goto">
| <IF: "if">
| <IMPLEMENTATION: "implementation">
| <IN: "in">
| <INHERITED: "inherited">
| <INLINE: "inline">
| <INTERFACE: "interface">
| <LABEL: "label">
| <MOD: "mod">
| <NIL: "nil">
| <NOT: "not">
| <OBJECT: "object">
| <OF: "of">
| <OPERATOR: "operator">
| <OR: "or">
| <PACKED: "packed">
| <PROCEDURE: "procedure">
| <PROGRAM: "program">
| <RECORD: "record  ">
| <REINTRODUCE: "reintroduce">
| <REPEAT: "repeat">
| <SELF: "self">
| <SET: "set">
| <SHL: "shl">
| <SHR: "shr">
| <STRING: "string">
| <THEN: "then">
| <TO: "to">
| <TYPE: "type">
| <UNIT: "unit">
| <UNTIL: "until">
| <USES: "uses">
| <VAR: "var">
| <WHILE: "while">
| <WITH: "with">
| <XOR: "xor">
}


//Object pascal reserved words
TOKEN: {
  <AS: "as">
| <CLASS: "class">
| <DISPINTERFACE: "dispinterface">
| <EXCEPT: "except">
| <EXPORTS: "exports">
| <FINALIZATION: "finalization">
| <FINALLY: "finally">
| <INITIALIZATION: "initialization">
//| <INLINE: "inline">
| <IS: "is">
| <LIBRARY: "library">
| <ON: "on">
| <OUT: "out">
//| <PACKED: "packed">
| <PROPERTY: "property">
| <RAISE: "raise">
| <RESOURCESTRING: "resourcestring">
| <THREADVAR: "threadvar">
| <TRY: "try">
}

//slareservada
TOKEN: {
//  <ABSOLUTE: "absolute">
  <ABSTRACT: "abstract">
| <ALIAS: "alias">
| <ASSEMBLER: "assembler">
| <BITPACKED: "bitpacked">
| <BREAK: "break">
| <CDECL: "cdecl">
| <CONTINUE: "continue">
| <CPPDECL: "cppdecl">
| <CVAR: "cvar">
| <_DEFAULT: "default">
| <DEPRECATED: "deprecated">
| <DYNAMIC: "dynamic">
| <ENUMERATOR: "enumerator">
| <EXPERIMENTAL: "experimental">
| <EXPORT: "export">
| <EXTERNAL: "external">
| <FAR: "far">
| <FAR16: "far16">
| <FORWARD: "forward">
| <GENERIC: "generic">
| <HELPER: "helper">
| <IMPLEMENTS: "implements">
| <INDEX: "index">
| <INTERRUPT: "interrupt">
| <IOCHECK: "iocheck">
| <LOCAL: "local">
| <MESSAGE: "message">
| <NAME: "name">
| <NEAR: "near">
| <NODEFAULT: "nodefault">
| <NORETURN: "noreturn">
| <NOSTACKFRAME: "nostackframe">
| <OLDFPCCALL: "oldfpccall">
| <OTHERWISE: "otherwise">
| <OVERLOAD: "overload">
| <OVERRIDE: "override">
| <PASCAL: "pascal">
| <PLATFORM: "platform">
| <PRIVATE: "private">
| <PROTECTED: "protected">
| <PUBLIC: "public">
| <PUBLISHED: "published">
| <READ: "read">
| <REGISTER: "register">
//| <REINTRODUCE: "reintroduce">
| <RESULT: "result">
| <SAFECALL: "safecall">
| <SAVEREGISTERS: "saveregisters">
| <SOFTFLOAT: "softfloat">
| <SPECIALIZE: "specialize">
| <STATIC: "static">
| <STDCALL: "stdcall">
| <STORED: "stored">
| <STRICT: "strict">
| <UNALIGNED: "unaligned">
| <UNIMPLEMENTED: "unimplemented">
| <VARARGS: "varargs">
| <VIRTUAL: "virtual">
| <WINAPI: "winapi">
| <WRITE: "write">
}


SPECIAL_TOKEN: {
  <AMPERSAND: "&">
}


//hexadecimal digit sequence 

TOKEN: {
  <UNSIGNEDINTEGER: <HEXDIGITSEQUENCE>
                  | <OCTALDIGITSEQUENCE>
                  | <BINARYDIGITSEQUENCE>
                  | <DIGITSEQUENCE> >
|  <UNSIGNEDREAL: (<DIGITSEQUENCE>)+ "." (<DIGITSEQUENCE>)* (<SCALEFACTOR>)? >
}



//digits
TOKEN: {
  <#DIGIT: "0" | <NONZERODIGIT> >
| <#NONZERODIGIT: ["1"-"9"]>
| <#HEXDIGIT: <DIGIT> | ["A"-"F"] | ["a"-"f"]>
| <#OCTALDIGIT: ["0"-"7"]>
| <#BINARYDIGIT: ["0","1"]>
| <#SIGN: "+" | "-">
| <#SCALEFACTOR: ("E" | "e") (<SIGN>)? (<DIGIT>)+ >
|  <#HEXDIGITSEQUENCE: "$" (<HEXDIGIT>)+ >
|  <#OCTALDIGITSEQUENCE: "&" (<OCTALDIGIT>)+ >
|  <#BINARYDIGITSEQUENCE: "%" (<BINARYDIGIT>)+ >
|  <#DIGITSEQUENCE: <DIGIT> (<DIGIT>)* >
|  <#UNSIGNEDNUMBER: <UNSIGNEDREAL> | <UNSIGNEDINTEGER> >
|  <#SIGNEDNUMBER: <SIGN> <UNSIGNEDNUMBER> >
}

TOKEN:
{
  <DOUBLELEFTARROW: "<<">
| <DOUBLERIGHTARROW: ">>">
| <DOUBLEASTERISK: "**">
| <LEFTRIGHTARROW: "<>">
| <RIGHTLEFTARROW: "><">
| <LESSTHANOREQUALS: "<=">
| <GREATHERTHANOREQUALS: ">=">
| <ASSIGMENT: ":=">
| <PLUSEQUALS: "+=">
| <MINUSEQUALS: "-=">
| <TIMESEQUALS: "*=">
| <SLASHEQUALS: "/=">
| <OPENPARENTHESISDOT: "(.">
| <DOTCLOSEPARENTHESIS: ".)">
//| <DOUBLESLASH: "//">
}



// special symbols
TOKEN:
{
  <QUOTE: "'">
| <PLUS: "+">
| <MINUS: "-">
| <ASTERISK: "*">
| <SLASH: "/">
| <EQUALS: "=">
| <LESSTHAN: "<">
| <GREATERTHAN: ">">
| <OPENBRACKETS: "[">
| <CLOSEBRACKETS: "]">
| <DOT: ".">
| <COMMA: ",">
| <OPENPARENTHESIS: "(">
| <CLOSEPARENTHESIS: ")">
| <COLON: ":">
| <CARET: "^">
| <AT: "@">
// | <OPENCURLYBRACKETS: "{">
// | <CLOSECURLYBRACKETS: "}">
//| <DOLLAR: "$">
| <HASH: "#">
// | <AMPERSAND: "&">
//| <PERCENT: "%">
}



//| <OPENPARENTHESISASTERISK: "(*">
//| <ASTERISKCLOSEPARENTHESIS: "*)">



// letter
TOKEN: {
  <#LETTER: <LOWER>|<UPPER> >
| <#LOWER: ["a"-"z"]>
| <#UPPER: ["A"-"Z","_"]>
}




//identifier
TOKEN: {
  <IDENTIFIER: (<AMPERSAND>)? <LETTER> (<LETTER> | <DIGIT>)* > 
  //copiar tudo depois &
}

TOKEN: {
  <#STRINGCHARATER: [" " - "&", "(" - "~"] >
| <QUOTETEDSTRING: "'" (<STRINGCHARATER>)* "'" >
}


// TOKEN: {
//   <#CHARESCAPESEQ: "\\" ["b", "t", "n", "f", "r", "\"", "\'", "\\"] >
// | <#PRINTABLECHAR: [" " - "~"] >
// | <#PRINTABLECHARNODOUBLEQUOTE: [" ","!", "#" - "~"]>
// }

// TOKEN: {
//   <CHARACTERLITERAL: "\'" (<PRINTABLECHAR> | <CHARESCAPESEQ> ) "\'" >
// | <STRINGLITERAL: "\"" (<STRINGELEMENT>)* "\"" >
// | <#STRINGELEMENT: <PRINTABLECHARNODOUBLEQUOTE> | <CHARESCAPESEQ> >
// }

// //INTEGER LITERAL
// TOKEN: {
//   <INTEGER: ("-")? (<DECIMAL> | <HEX>) ("L" | "l")? >
// | <#DECIMAL: ("0" | <NONZERODIGIT>) (<DIGIT>)* >
// | <#HEX: "0" ("x" | "X") <HEXDIGIT> (<HEXDIGIT>)* >
// | <#DIGIT: "0" | <NONZERODIGIT> >
// | <#NONZERODIGIT: ["1"-"9"]>
// | <#HEXDIGIT: ["0"-"9", "A"-"F"]>
// }


//{*}
//(&)
//[?]

// //FLOAT LITERAL
// TOKEN: {
//   <FLOAT: ("-")? (<TYPE1> |  <TYPE2> | <TYPE3> | <TYPE4>) >
// | <#TYPE1: <DIGIT> (<DIGIT>)* "." <DIGIT> (<DIGIT>)* (<EXPONENTPART>)? (<FLOATTYPE>)?   >
// | <#TYPE2: "." <DIGIT> (<DIGIT>)* (<EXPONENTPART>)? (<FLOATTYPE>)?>
// | <#TYPE3: <DIGIT> (<DIGIT>)* <EXPONENTPART> (<FLOATTYPE>)?>
// | <#TYPE4: <DIGIT> (<DIGIT>)* (<EXPONENTPART>)? <FLOATTYPE> >
// | <#EXPONENTPART: ("E" | "e") ("+" | "-")? <DIGIT> (<DIGIT>)* >
// | <#FLOATTYPE: "F"|"f"|"D"|"d">
// }

// TOKEN: {
//   <#LETTER: <LOWER>|<UPPER> >
// | <#LOWER: ["a"-"z"]>
// | <#UPPER: ["A"-"Z","_"]>
// }

// TOKEN: {
//   <ID: <PLAINID> | ("`" (<STRINGELEMENT>)* "`") >
// | <#PLAINID: (<UPPER> <IDREST>) | <VARID> | <OP> >
// | <#OP: <OPCHAR> (<OPCHAR>)*>
// | <#VARID: <LOWER> <IDREST> >
// | <#IDREST: (<LETTER> | <DIGIT>)* ("_" <OP>)? >
// | <#OPCHAR : ["!","#","%","&","*","+","-","/",":","<","=",">","?","@","\\","^","|","~"]>

// }

// TOKEN: {
//   <DELIMITER: "." | ";" | "," >
// }

// TOKEN: {
//   <MULTILINESTRING: "\"\"\"" <MULTILINECHARS> "\"\"\"" >
// | <#MULTILINECHARS: (("\"")? ("\"")? <CHARNODOUBLEQUOTES> )* ("\"")* >
// | <#CHARNODOUBLEQUOTES:  ~["\""] >
// }



