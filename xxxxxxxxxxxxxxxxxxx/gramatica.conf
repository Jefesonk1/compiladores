/* converted on Sun Mar 26, 2023, 21:49 (UTC-03) by antlr_4-to-w3c v0.64 which is Copyright (c) 2011-2023 by Gunther Rademacher <grd@gmx.net> */

program  ::= programHeading block '.' EOF
programHeading
         ::= 'PROGRAM' IDENTIFIER ( '(' identifierList ')' )? ';'
block    ::= ( constantDefinitionPart | variableDeclarationPart | procedureAndFunctionDeclarationPart )* compoundStatement
constantDefinitionPart
         ::= 'CONST' ( constantDefinition ';' )+
constantDefinition
         ::= IDENTIFIER '=' constant
constant ::= sign? ( unsignedNumber | IDENTIFIER )
           | string
unsignedNumber
         ::= UNSIGNED_INTEGER
           | UNSIGNED_REAL
sign     ::= '+'
           | '-'
bool_    ::= 'TRUE'
           | 'FALSE'
string   ::= CHARACTER_STRING
type_    ::= simpleType
           | arrayType
simpleType
         ::= scalarType
           | subrangeType
           | typeIdentifier
           | stringType
scalarType
         ::= '(' identifierList ')'
subrangeType
         ::= constant '..' constant
typeIdentifier
         ::= IDENTIFIER
           | 'CHAR'
           | 'BOOLEAN'
           | 'INTEGER'
           | 'REAL'
           | 'STRING'
stringType
         ::= 'STRING' '[' ( IDENTIFIER | unsignedNumber ) ']'
arrayType
         ::= 'ARRAY' ( '[' typeList ']' | '(.' typeList '.)' ) 'OF' typeIdentifier ( '=' '(' parameterList ')' )?
typeList ::= indexType ( ',' indexType )*
indexType
         ::= simpleType
variableDeclarationPart
         ::= 'VAR' ( variableDeclaration ';' )+
variableDeclaration
         ::= identifierList ':' type_
procedureAndFunctionDeclarationPart
         ::= ( procedureDeclaration | functionDeclaration ) ';'
procedureDeclaration
         ::= 'PROCEDURE' IDENTIFIER formalParameterList? ';' block
formalParameterList
         ::= '(' formalParameterSection? ( ';' formalParameterSection )* ')'
formalParameterSection
         ::= ( 'VAR' | 'FUNCTION' | 'PROCEDURE' )? parameterGroup
parameterGroup
         ::= identifierList ':' typeIdentifier
identifierList
         ::= IDENTIFIER ( ',' IDENTIFIER )*
functionDeclaration
         ::= 'FUNCTION' IDENTIFIER formalParameterList? ':' resultType ';' block
resultType
         ::= typeIdentifier
statement
         ::= simpleStatement
           | structuredStatement
simpleStatement
         ::= assignmentStatement
           | procedureStatement
           | emptyStatement_
assignmentStatement
         ::= variable ':=' expression
variable ::= IDENTIFIER ( '[' expression ( ',' expression )* ']' | '(.' expression ( ',' expression )* '.)' | '.' IDENTIFIER )*
expression
         ::= simpleExpression ( relationalOperator simpleExpression )*
relationalOperator
         ::= '='
           | '<>'
           | '<'
           | '<='
           | '>='
           | '>'
           | 'IN'
simpleExpression
         ::= term ( additiveOperator term )*
additiveOperator
         ::= '+'
           | '-'
           | 'OR'
term     ::= signedFactor ( multiplicativeOperator signedFactor )*
multiplicativeOperator
         ::= '*'
           | '/'
           | 'DIV'
           | 'MOD'
           | 'AND'
signedFactor
         ::= ( '+' | '-' )? 'NOT'* ( variable | '(' expression ')' | functionDesignator | unsignedConstant | bool_ )
unsignedConstant
         ::= unsignedNumber
           | string
           | 'NIL'
functionDesignator
         ::= IDENTIFIER '(' parameterList ')'
parameterList
         ::= actualParameter ( ',' actualParameter )*
procedureStatement
         ::= IDENTIFIER ( '(' parameterList ')' )?
actualParameter
         ::= expression? parameterWidth*
parameterWidth
         ::= ':' expression
emptyStatement_
         ::=
structuredStatement
         ::= compoundStatement
           | ifStatement
           | whileStatement
compoundStatement
         ::= 'BEGIN' statements 'END'
statements
         ::= statement ( ';' statement )*
ifStatement
         ::= 'IF' expression 'THEN' statement ( 'ELSE' statement )?
whileStatement
         ::= 'WHILE' expression 'DO' statement
_        ::= WS
           | COMMENT_1
           | COMMENT_2
          /* ws: definition */

<?TOKENS?>

WS       ::= [ #x9#xd#xa]
COMMENT_1?
         ::= '(*' .* '*)'
COMMENT_2?
         ::= '{' .* '}'
IDENTIFIER
         ::= [A-Z] [A-Z0-9_]*
CHARACTER_STRING
         ::= "'" ( "''" | [^'] )* "'"
UNSIGNED_INTEGER
         ::= [0-9]+
UNSIGNED_REAL
         ::= [0-9]+ ( '.' [0-9]+ )? EXPONENT?
EXPONENT ::= 'E' ( '+' | '-' )? [0-9]+
EOF      ::= $



program -> programHeading block DOT $
programHeading -> RESERVED_PROGRAM IDENTIFIER ( OPEN_PARENTHESIS identifierList CLOSE_PARENTHESIS )? SEMICOLON
block -> ( constantDefinitionPart | variableDeclarationPart | procedureAndFunctionDeclarationPart )* compoundStatement
constantDefinitionPart -> RESERVED_CONST ( constantDefinition SEMICOLON )+
constantDefinition -> IDENTIFIER ASSIGNMENT constant
constant -> sign? ( unsignedNumber | IDENTIFIER ) | string
unsignedNumber -> UNSIGNED_INTEGER | UNSIGNED_REAL
sign -> PLUS | MINUS
bool_ -> RESERVED_TRUE | RESERVED_FALSE
string -> CHARACTER_STRING
type_ -> simpleType | arrayType
simpleType -> scalarType | subrangeType | typeIdentifier | stringType
scalarType -> OPEN_PARENTHESIS identifierList CLOSE_PARENTHESIS
subrangeType -> constant DOUBLE_DOT constant
typeIdentifier -> IDENTIFIER | RESERVED_CHAR | RESERVED_BOOLEAN | RESERVED_INTEGER | RESERVED_REAL | RESERVED_STRING
stringType -> RESERVED_STRING OPEN_BRACKET ( IDENTIFIER | unsignedNumber ) CLOSE_BRACKET
arrayType -> RESERVED_ARRAY ( OPEN_BRACKET typeList CLOSE_BRACKET | OPEN_PARENTHESIS_DOT typeList DOT_CLOSE_PARENTHESIS ) RESERVED_OF typeIdentifier ( ASSIGNMENT OPEN_PARENTHESIS parameterList CLOSE_PARENTHESIS )?
typeList -> indexType ( COMMA indexType )*
indexType -> simpleType
variableDeclarationPart -> RESERVED_VAR ( variableDeclaration SEMICOLON )+
variableDeclaration -> identifierList COLON type_
procedureAndFunctionDeclarationPart -> ( procedureDeclaration | functionDeclaration ) SEMICOLON
procedureDeclaration -> RESERVED_PROCEDURE IDENTIFIER formalParameterList? SEMICOLON block
formalParameterList -> OPEN_PARENTHESIS formalParameterSection? ( SEMICOLON formalParameterSection )* CLOSE_PARENTHESIS
formalParameterSection -> ( RESERVED_VAR | RESERVED_FUNCTION | RESERVED_PROCEDURE )? parameterGroup
parameterGroup -> identifierList COLON typeIdentifier
identifierList -> IDENTIFIER ( COMMA IDENTIFIER )*
functionDeclaration -> RESERVED_FUNCTION IDENTIFIER formalParameterList? COLON resultType SEMICOLON block
resultType -> typeIdentifier
statement -> simpleStatement | structuredStatement
simpleStatement -> assignmentStatement | procedureStatement | emptyStatement_
assignmentStatement -> variable ASSIGNMENT expression
variable -> IDENTIFIER ( OPEN_BRACKET expression ( COMMA expression )* CLOSE_BRACKET | OPEN_PARENTHESIS_DOT expression ( COMMA expression )* DOT_CLOSE_PARENTHESIS | DOT IDENTIFIER )*
expression -> simpleExpression ( relationalOperator simpleExpression )*
relationalOperator -> ASSIGNMENT | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN_OR_EQUAL | GREATER_THAN | RESERVED_IN
simpleExpression -> term ( additiveOperator term )*
additiveOperator -> PLUS | MINUS | RESERVED_OR
term -> signedFactor ( multiplicativeOperator signedFactor )*
multiplicativeOperator -> ASTERISK | SLASH | RESERVED_DIV | RESERVED_MOD | RESERVED_AND
signedFactor -> ( PLUS | MINUS )? RESERVED_NOT* ( variable | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS | functionDesignator | unsignedConstant | bool_ )
unsignedConstant -> unsignedNumber | string | RESERVED_NIL
functionDesignator -> IDENTIFIER OPEN_PARENTHESIS parameterList CLOSE_PARENTHESIS
parameterList -> actualParameter ( COMMA actualParameter )*
procedureStatement -> IDENTIFIER ( OPEN_PARENTHESIS parameterList CLOSE_PARENTHESIS )?
actualParameter -> expression? parameterWidth*
parameterWidth -> COLON expression
emptyStatement_ ->
structuredStatement -> compoundStatement | ifStatement | whileStatement
compoundStatement -> RESERVED_BEGIN statements RESERVED_END
statements -> statement ( SEMICOLON statement )*
ifStatement -> RESERVED_IF expression RESERVED_THEN statement ( RESERVED_ELSE statement )?
whileStatement -> RESERVED_WHILE expression RESERVED_DO statement