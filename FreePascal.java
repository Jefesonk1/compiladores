/* Generated By:JavaCC: Do not edit this line. FreePascal.java */
import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Map;

public class FreePascal implements FreePascalConstants {
  public static void main(String args[]) throws ParseException, IOException, IllegalAccessException {
    FreePascal lex = new FreePascal(new FileInputStream(args[0]));
    Map<Integer, String> CONSTANTES = new HashMap<Integer, String>();
    Class<?> clazz = FreePascalConstants.class;
    Field[] fields = clazz.getFields();

    for (Field field : fields) {
      if (field.getType() == int.class) {
      int modifiers = field.getModifiers();
      if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {
          try {
              CONSTANTES.put(field.getInt(null), field.getName());
          } catch (Exception e) {
              e.printStackTrace();
          }
      }
    }
  }
    // for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
    //   System.out.println(CONSTANTES.get(t.kind)+ " "+t.image);
    // }
    lex.Program();
  }

  static final public void Program() throws ParseException {
    jj_consume_token(RESERVED_PROGRAM);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMI);
    Block();
    jj_consume_token(DOT);
  }

  static final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_VAR:
      jj_consume_token(RESERVED_VAR);
      VarBlock();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_FUNCTION:
      FuncBlock();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    Statements();
  }

  static final public void VarDeclaration() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(COLON);
    Type();
  }

  static final public void VarBlock() throws ParseException {
    VarDeclaration();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEMI);
      VarDeclaration();
    }
  }

  static final public void FuncBlock() throws ParseException {
    jj_consume_token(RESERVED_FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(OPEN_PARENTHESIS);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      VarDeclaration();
    }
    jj_consume_token(CLOSE_PARENTHESIS);
    jj_consume_token(COLON);
    Type();
    jj_consume_token(SEMI);
    Block();
  }

  static final public void Statements() throws ParseException {
    jj_consume_token(RESERVED_BEGIN);
    Statement();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEMI);
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RESERVED_END);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Assignment();
      break;
    case RESERVED_BEGIN:
      Statements();
      break;
    case RESERVED_IF:
      If();
      break;
    case RESERVED_WHILE:
      While();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void If() throws ParseException {
    jj_consume_token(RESERVED_IF);
    Expression();
    jj_consume_token(RESERVED_THEN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_ELSE:
      jj_consume_token(RESERVED_ELSE);
      Statement();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void While() throws ParseException {
    jj_consume_token(RESERVED_WHILE);
    Expression();
    jj_consume_token(RESERVED_DO);
    Statement();
  }

  static final public void Assignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGMENT);
    Expression();
  }

  static final public void Expression() throws ParseException {
    SimpleExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_IN:
      case RESERVED_IS:
      case LEFT_RIGHT_ARROW:
      case LESS_THAN_OR_EQUALS:
      case GREATHER_THAN_OR_EQUALS:
      case EQUALS:
      case LESS_THAN:
      case GREATER_THAN:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUALS:
        jj_consume_token(LESS_THAN_OR_EQUALS);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case GREATHER_THAN_OR_EQUALS:
        jj_consume_token(GREATHER_THAN_OR_EQUALS);
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case LEFT_RIGHT_ARROW:
        jj_consume_token(LEFT_RIGHT_ARROW);
        break;
      case RESERVED_IN:
        jj_consume_token(RESERVED_IN);
        break;
      case RESERVED_IS:
        jj_consume_token(RESERVED_IS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleExpression();
    }
  }

  static final public void SimpleExpression() throws ParseException {
    Term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_OR:
      case RESERVED_XOR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case RESERVED_OR:
        jj_consume_token(RESERVED_OR);
        break;
      case RESERVED_XOR:
        jj_consume_token(RESERVED_XOR);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
    }
  }

  static final public void Term() throws ParseException {
    Factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVED_AND:
      case ASTERISK:
      case SLASH:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case RESERVED_AND:
        jj_consume_token(RESERVED_AND);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
    }
  }

// TOKEN: {
//   <NUMBER: "0" | <NON_ZERO_DIGIT> >
// }
  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_NOT:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case RESERVED_NOT:
        jj_consume_token(RESERVED_NOT);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
      break;
    case DECIMAL_SEQUENCE:
      jj_consume_token(DECIMAL_SEQUENCE);
      break;
    case OPEN_PARENTHESIS:
      jj_consume_token(OPEN_PARENTHESIS);
      Expression();
      jj_consume_token(CLOSE_PARENTHESIS);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
      FuncCall();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FuncCall() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(OPEN_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVED_NOT:
    case DECIMAL_SEQUENCE:
    case PLUS:
    case MINUS:
    case OPEN_PARENTHESIS:
    case IDENTIFIER:
      Expression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        jj_consume_token(SEMI);
        Expression();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PARENTHESIS);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 193:
      type = jj_consume_token(193);
      break;
    case 194:
      jj_consume_token(194);
      break;
    case RESERVED_STRING:
      jj_consume_token(RESERVED_STRING);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FreePascalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x8002000,0x200000,0x20000000,0x20000000,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x20000100,0x20000100,0x0,0x0,0x10,0x10,0x0,0x10,0x80000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0000000,0xd0000000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x40000,0x80,0x80000000,0x80,0x80,0x80000000,0x0,0x7000,0x7000,0x300,0x300,0xc00,0xc00,0x300,0x80080300,0x80,0x80080300,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,};
   }

  /** Constructor with InputStream. */
  public FreePascal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FreePascal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FreePascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FreePascal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FreePascalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FreePascal(FreePascalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FreePascalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[195];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 195; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
