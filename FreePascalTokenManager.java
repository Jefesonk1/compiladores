/* Generated By:JavaCC: Do not edit this line. FreePascalTokenManager.java */
import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.Map;

/** Token Manager. */
public class FreePascalTokenManager implements FreePascalConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8002000000000L) != 0L)
            return 0;
         if ((active0 & 0xfffffffffffffe00L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x3ffL) != 0L || (active3 & 0x6L) != 0L)
         {
            jjmatchedKind = 191;
            return 28;
         }
         if ((active2 & 0x400L) != 0L)
            return 41;
         if ((active2 & 0x81000000000L) != 0L)
            return 8;
         if ((active2 & 0x30600000000L) != 0L)
            return 36;
         return -1;
      case 1:
         if ((active0 & 0x40200141e8181000L) != 0L || (active1 & 0x6000020160L) != 0L || (active3 & 0x4L) != 0L)
            return 28;
         if ((active0 & 0xbfdffebe17e7ee00L) != 0L || (active1 & 0xffffff9ffffdfe9fL) != 0L || (active2 & 0x3ffL) != 0L || (active3 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 1;
            }
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x2407001c01441400L) != 0L || (active1 & 0x380004200L) != 0L || (active2 & 0x40L) != 0L)
            return 28;
         if ((active0 & 0x9bd8fea3d6b3ea00L) != 0L || (active1 & 0xfffffffc7fffbcbfL) != 0L || (active2 & 0x3bfL) != 0L || (active3 & 0x6L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0x12d0800004a04000L) != 0L || (active1 & 0x2000c0000800000L) != 0L)
            return 28;
         if ((active0 & 0x89087ea3d213aa00L) != 0L || (active1 & 0xfdfff3ff7f7fbcbfL) != 0L || (active2 & 0x3ffL) != 0L || (active3 & 0x6L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x890000020001a800L) != 0L || (active1 & 0x12100190800L) != 0L || (active2 & 0x200L) != 0L)
            return 28;
         if ((active0 & 0x87ea1d2120200L) != 0L || (active1 & 0xfdfff2de7f66b4bfL) != 0L || (active2 & 0x1ffL) != 0L || (active3 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 4;
            }
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x8422080100000L) != 0L || (active1 & 0x888000820000006L) != 0L || (active2 & 0x10dL) != 0L)
            return 28;
         if ((active0 & 0x3c8152030200L) != 0L || (active1 & 0xf577f2d65f66b4b9L) != 0L || (active2 & 0xf2L) != 0L || (active3 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 5;
            }
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x20028605400094L) != 0L || (active2 & 0xc2L) != 0L)
            return 28;
         if ((active0 & 0x248152030200L) != 0L || (active1 & 0xf557f0505a26b429L) != 0L || (active2 & 0x30L) != 0L || (active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x240150030000L) != 0L || (active1 & 0xe141d0501a063029L) != 0L || (active2 & 0x30L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 7;
            return 28;
         }
         if ((active0 & 0x8002000200L) != 0L || (active1 & 0x1416200040208400L) != 0L)
            return 28;
         return -1;
      case 8:
         if ((active0 & 0x40140000000L) != 0L || (active1 & 0x4141104000062000L) != 0L || (active2 & 0x10L) != 0L)
            return 28;
         if ((active0 & 0x200010030000L) != 0L || (active1 & 0xa000c0101a001029L) != 0L || (active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000L) != 0L || (active1 & 0x800080100a000000L) != 0L)
            return 28;
         if ((active0 & 0x200010010000L) != 0L || (active1 & 0x2000400010001029L) != 0L || (active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x2000400010001029L) != 0L || (active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 10;
            return 28;
         }
         if ((active0 & 0x200000010000L) != 0L)
            return 28;
         return -1;
      case 11:
         if ((active1 & 0x400010000008L) != 0L)
            return 28;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x2000000000001021L) != 0L || (active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      case 12:
         if ((active1 & 0x2000000000000001L) != 0L || (active2 & 0x20L) != 0L)
            return 28;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x1020L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 12;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L, 0x0L);
      case 38:
         return jjStartNfaWithStates_0(0, 138, 41);
      case 40:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 180);
      case 42:
         jjmatchedKind = 170;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L, 0x0L);
      case 43:
         jjmatchedKind = 168;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 178);
      case 45:
         jjmatchedKind = 169;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L, 0x0L);
      case 46:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L, 0x0L);
      case 47:
         jjmatchedKind = 171;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L, 0x0L);
      case 58:
         jjmatchedKind = 181;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 167);
      case 60:
         jjmatchedKind = 173;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x54000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 172);
      case 62:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xa8000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 183);
      case 91:
         return jjStopAtPos(0, 175);
      case 93:
         return jjStopAtPos(0, 176);
      case 94:
         return jjStopAtPos(0, 182);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000000001e00L, 0x38000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0xc0000L, 0x0L, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000000001c000L, 0xf00000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1e0000L, 0x7000001L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x78000006L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3800000L, 0x380000018L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x400000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f8000000L, 0xf000000060L, 0x0L, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x10000000080L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x20000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x7c0000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1e000000000L, 0x7800000000300L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0xe0000000000L, 0x1f8000000000400L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0xe00000000001800L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0xf000000000000000L, 0xfL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x70000000000000L, 0x6000L, 0x0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0x0L, 0x30L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L, 0xc0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L, 0x300L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 41:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      case 46:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      case 60:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         break;
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 62:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400020200004000L, active1, 0x3008040180000800L, active2, 0x40L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000200L, active1, 0x8000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f00000022000L, active1, 0xe000a0c03001000L, active2, 0L, active3, 0L);
      case 70:
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 28);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 28);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x816000000000000L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000800840000L, active1, 0x40099L, active2, 0x180L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000200000L, active1, 0x10800000010000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800001c0400400L, active1, 0x6008000020L, active2, 0x30L, active3, 0x4L);
      case 79:
      case 111:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001405118000L, active1, 0x4000718200200000L, active2, 0L, active3, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x8000000000400000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000800L, active1, 0x60000000084400L, active2, 0x200L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000001000L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x1000000000000L, active2, 0xfL, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x180000000000200L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000800000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x70000006L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x4000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x210080000800000L, active2, 0x11L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x180000000000080L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000000L, active1, 0x18000000002L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 28);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 28);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x902000000000L, active2, 0x2L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x210008000000000L, active1, 0x8006000000180000L, active2, 0L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5000000001000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x880200000000000L, active1, 0x20000000010820L, active2, 0x220L, active3, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 28);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x800080800000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2018000L, active1, 0x404200018L, active2, 0x100L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L, active1, 0x40000000000400L, active2, 0x4L, active3, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400010000000L, active1, 0x1032400004L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 28);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 28);
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000800L, active1, 0x200300002000L, active2, 0xc8L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x224200L, active1, 0x808420000029001L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 28);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 28);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000104000000L, active1, 0x4040040000L, active2, 0L, active3, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0x10005090018L, active2, 0x140L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40002000000L, active1, 0x8008000000100000L, active2, 0x2L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 28);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 28);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 28);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 28);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x402340000000L, active1, 0x3001306450022002L, active2, 0L, active3, 0x4L);
      case 70:
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000080002000L, active1, 0x400000000000000L, active2, 0x8L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 191, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000010000000L, active1, 0x180001000000000L, active2, 0x10L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0x20L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000100000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000200L, active1, 0x20001004L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800040401L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 28);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x6000002000080L, active2, 0x4L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000018000L, active1, 0x20000000800L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x4050400000208020L, active2, 0x281L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 54:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 28);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x408000000000L, active1, 0x28420200042080L, active2, 0x2L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x1000000000000000L, active2, 0x8L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 28);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 28);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 137, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x60010000000L, active1, 0x4000980a400400L, active2, 0x4L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4010100000000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8180000000200021L, active2, 0x11L, active3, 0L);
      case 75:
      case 107:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 28);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 28);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 28);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 28);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x802000000000018L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4020000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000080000000L, active1, 0L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000002L, active2, 0x120L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x180140020000L, active1, 0x2005004470008004L, active2, 0x40L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 28);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200002110000L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1001000L, active2, 0x80L, active3, 0L);
      case 88:
      case 120:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 28);
         break;
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x9000100000008020L, active2, 0x80L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 28);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40c08002440000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 28);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x50L, active3, 0L);
      case 73:
      case 105:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x42000000L, active1, 0x4000414000008L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000001000010L, active2, 0x22L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40200001L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x12000000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000010000L, active1, 0x4208001480L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 28);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 28);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 28);
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 28);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x420000000000004L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20200L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x200004a000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 28);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0x800000009000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 28);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0x400001000000000L, active2, 0x20L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 75:
      case 107:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000040000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 28);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 28);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x9000000000020020L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x208002000000L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 191, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10200000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 28);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 28);
         break;
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000200L, active1, 0x40000000000401L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000010000L, active1, 0x104000200000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 28);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 28);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000800000002008L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100010000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 28);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 28);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x140000010061001L, active2, 0x10L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xa000000000000020L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 28);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 28);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x1000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 28);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 122, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0xa000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 28);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 28);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 28);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 120, 28);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 132, 28);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 28);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0x8000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 28);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000001L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000001000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 28);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 28);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 126, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x10010000L, active1, 0x1000000008L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000020L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0x400000000020L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 89, 28);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 127, 28);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 111, 28);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 17, 28);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 91, 28);
         break;
      case 83:
      case 115:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 100, 28);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000010001000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000001L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 28);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 16, 28);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0x20L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 110, 28);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L, active1, 0x1020L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 92, 28);
         break;
      case 78:
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 28);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(12, 133, 28);
         break;
      case 69:
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 28);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L, active1, 0x20L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 125, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 76, 28);
         break;
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 28, 28);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(13, 69, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 41:
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAdd(37);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 151)
                        kind = 151;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 37)
                     jjCheckNAdd(14);
                  else if (curChar == 38)
                     jjCheckNAdd(37);
                  else if (curChar == 36)
                     jjCheckNAdd(12);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 30);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 151)
                        kind = 151;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 7);
                  else if (curChar == 38)
                     jjCheckNAddTwoStates(37, 27);
                  else if (curChar == 35)
                     jjCheckNAddStates(8, 12);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 37)
                     jjCheckNAdd(14);
                  else if (curChar == 36)
                     jjCheckNAdd(12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar == 41 && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  jjAddStates(13, 14);
                  break;
               case 8:
                  if (curChar != 47)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 36)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 37)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7f00000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar != 39)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddTwoStates(15, 18);
                  break;
               case 18:
                  if (curChar == 35)
                     jjCheckNAddStates(8, 12);
                  break;
               case 19:
                  if (curChar == 36)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(15, 17);
                  break;
               case 21:
                  if (curChar == 38)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(18, 20);
                  break;
               case 23:
                  if (curChar == 37)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(21, 23);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(24, 26);
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 7);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 30);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddTwoStates(33, 32);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAdd(35);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjCheckNAddStates(0, 2);
                  break;
               case 40:
                  if (curChar == 38)
                     jjCheckNAddTwoStates(37, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 41:
               case 27:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(28);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 1:
                  jjAddStates(30, 31);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 125 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 20:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjAddStates(15, 17);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   31, 38, 30, 30, 11, 36, 13, 38, 19, 21, 23, 25, 26, 6, 7, 15, 
   18, 20, 15, 18, 22, 15, 18, 24, 15, 18, 25, 19, 21, 23, 1, 3, 
   16, 17, 34, 35, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\41\75", "\74\74", "\76\76", "\74\76", "\76\74", "\74\75", "\76\75", "\72\75", 
"\53\75", "\55\75", "\52\75", "\57\75", "\50\56", "\56\51", "\73", "\53", "\55", "\52", 
"\57", "\75", "\74", "\76", "\133", "\135", "\56", "\54", "\50", "\51", "\72", 
"\136", "\100", null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0x88fffffffebc03ffL, 0x6L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x400L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x400L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[41];
static private final int[] jjstateSet = new int[82];
static protected char curChar;
/** Constructor. */
public FreePascalTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public FreePascalTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
